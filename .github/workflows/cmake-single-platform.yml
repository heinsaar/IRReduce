# This starter workflow is for a CMake project running on multiple platforms (Linux and Windows).
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # Using a matrix build to achieve cross-platform coverage (Linux and Windows).
    # See: https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make (Linux).
      # On Windows, generators like Visual Studio use multi-config, so the build type is specified at build time instead.
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      shell: bash

    - name: Build
      # Build your program with the given configuration.
      # On Windows, `--config` specifies the build type for multi-config generators like Visual Studio.
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      shell: bash

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # `-C` specifies the configuration (build type) when using multi-config generators (Windows).
      run: |
        ctest -C ${{env.BUILD_TYPE}}
      shell: bash

    - name: Run Executable
      working-directory: ${{github.workspace}}/build
      # Run the built executable. Adapt path and executable name based on OS differences.
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          .\\Release\\IRReduce.exe ..\\ir\\ir_1.txt --pass_unusedconstants
        else
          ./IRReduce ../ir/ir_1.txt --pass_unusedconstants
        fi
      shell: bash
